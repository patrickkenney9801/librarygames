// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: game.proto

package v1

import (
  context "context"
  grpc "google.golang.org/grpc"
  codes "google.golang.org/grpc/codes"
  status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
  CreateGame_CreateGame_FullMethodName = "/CreateGame/CreateGame"
)

// CreateGameClient is the client API for CreateGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateGameClient interface {
  CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
}

type createGameClient struct {
  cc grpc.ClientConnInterface
}

func NewCreateGameClient(cc grpc.ClientConnInterface) CreateGameClient {
  return &createGameClient{cc}
}

func (c *createGameClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
  out := new(CreateGameResponse)
  err := c.cc.Invoke(ctx, CreateGame_CreateGame_FullMethodName, in, out, opts...)
  if err != nil {
    return nil, err
  }
  return out, nil
}

// CreateGameServer is the server API for CreateGame service.
// All implementations must embed UnimplementedCreateGameServer
// for forward compatibility
type CreateGameServer interface {
  CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
  mustEmbedUnimplementedCreateGameServer()
}

// UnimplementedCreateGameServer must be embedded to have forward compatible implementations.
type UnimplementedCreateGameServer struct {
}

func (UnimplementedCreateGameServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
  return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedCreateGameServer) mustEmbedUnimplementedCreateGameServer() {}

// UnsafeCreateGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateGameServer will
// result in compilation errors.
type UnsafeCreateGameServer interface {
  mustEmbedUnimplementedCreateGameServer()
}

func RegisterCreateGameServer(s grpc.ServiceRegistrar, srv CreateGameServer) {
  s.RegisterService(&CreateGame_ServiceDesc, srv)
}

func _CreateGame_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(CreateGameRequest)
  if err := dec(in); err != nil {
    return nil, err
  }
  if interceptor == nil {
    return srv.(CreateGameServer).CreateGame(ctx, in)
  }
  info := &grpc.UnaryServerInfo{
    Server:     srv,
    FullMethod: CreateGame_CreateGame_FullMethodName,
  }
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(CreateGameServer).CreateGame(ctx, req.(*CreateGameRequest))
  }
  return interceptor(ctx, in, info, handler)
}

// CreateGame_ServiceDesc is the grpc.ServiceDesc for CreateGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateGame_ServiceDesc = grpc.ServiceDesc{
  ServiceName: "CreateGame",
  HandlerType: (*CreateGameServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "CreateGame",
      Handler:    _CreateGame_CreateGame_Handler,
    },
  },
  Streams:  []grpc.StreamDesc{},
  Metadata: "game.proto",
}

const (
  GetGames_GetGames_FullMethodName = "/GetGames/GetGames"
)

// GetGamesClient is the client API for GetGames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetGamesClient interface {
  GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error)
}

type getGamesClient struct {
  cc grpc.ClientConnInterface
}

func NewGetGamesClient(cc grpc.ClientConnInterface) GetGamesClient {
  return &getGamesClient{cc}
}

func (c *getGamesClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error) {
  out := new(GetGamesResponse)
  err := c.cc.Invoke(ctx, GetGames_GetGames_FullMethodName, in, out, opts...)
  if err != nil {
    return nil, err
  }
  return out, nil
}

// GetGamesServer is the server API for GetGames service.
// All implementations must embed UnimplementedGetGamesServer
// for forward compatibility
type GetGamesServer interface {
  GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error)
  mustEmbedUnimplementedGetGamesServer()
}

// UnimplementedGetGamesServer must be embedded to have forward compatible implementations.
type UnimplementedGetGamesServer struct {
}

func (UnimplementedGetGamesServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error) {
  return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedGetGamesServer) mustEmbedUnimplementedGetGamesServer() {}

// UnsafeGetGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetGamesServer will
// result in compilation errors.
type UnsafeGetGamesServer interface {
  mustEmbedUnimplementedGetGamesServer()
}

func RegisterGetGamesServer(s grpc.ServiceRegistrar, srv GetGamesServer) {
  s.RegisterService(&GetGames_ServiceDesc, srv)
}

func _GetGames_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(GetGamesRequest)
  if err := dec(in); err != nil {
    return nil, err
  }
  if interceptor == nil {
    return srv.(GetGamesServer).GetGames(ctx, in)
  }
  info := &grpc.UnaryServerInfo{
    Server:     srv,
    FullMethod: GetGames_GetGames_FullMethodName,
  }
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GetGamesServer).GetGames(ctx, req.(*GetGamesRequest))
  }
  return interceptor(ctx, in, info, handler)
}

// GetGames_ServiceDesc is the grpc.ServiceDesc for GetGames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetGames_ServiceDesc = grpc.ServiceDesc{
  ServiceName: "GetGames",
  HandlerType: (*GetGamesServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "GetGames",
      Handler:    _GetGames_GetGames_Handler,
    },
  },
  Streams:  []grpc.StreamDesc{},
  Metadata: "game.proto",
}

const (
  GetSpectatorGames_GetSpectatorGames_FullMethodName = "/GetSpectatorGames/GetSpectatorGames"
)

// GetSpectatorGamesClient is the client API for GetSpectatorGames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSpectatorGamesClient interface {
  GetSpectatorGames(ctx context.Context, in *GetSpectatorGamesRequest, opts ...grpc.CallOption) (*GetSpectatorGamesResponse, error)
}

type getSpectatorGamesClient struct {
  cc grpc.ClientConnInterface
}

func NewGetSpectatorGamesClient(cc grpc.ClientConnInterface) GetSpectatorGamesClient {
  return &getSpectatorGamesClient{cc}
}

func (c *getSpectatorGamesClient) GetSpectatorGames(ctx context.Context, in *GetSpectatorGamesRequest, opts ...grpc.CallOption) (*GetSpectatorGamesResponse, error) {
  out := new(GetSpectatorGamesResponse)
  err := c.cc.Invoke(ctx, GetSpectatorGames_GetSpectatorGames_FullMethodName, in, out, opts...)
  if err != nil {
    return nil, err
  }
  return out, nil
}

// GetSpectatorGamesServer is the server API for GetSpectatorGames service.
// All implementations must embed UnimplementedGetSpectatorGamesServer
// for forward compatibility
type GetSpectatorGamesServer interface {
  GetSpectatorGames(context.Context, *GetSpectatorGamesRequest) (*GetSpectatorGamesResponse, error)
  mustEmbedUnimplementedGetSpectatorGamesServer()
}

// UnimplementedGetSpectatorGamesServer must be embedded to have forward compatible implementations.
type UnimplementedGetSpectatorGamesServer struct {
}

func (UnimplementedGetSpectatorGamesServer) GetSpectatorGames(context.Context, *GetSpectatorGamesRequest) (*GetSpectatorGamesResponse, error) {
  return nil, status.Errorf(codes.Unimplemented, "method GetSpectatorGames not implemented")
}
func (UnimplementedGetSpectatorGamesServer) mustEmbedUnimplementedGetSpectatorGamesServer() {}

// UnsafeGetSpectatorGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSpectatorGamesServer will
// result in compilation errors.
type UnsafeGetSpectatorGamesServer interface {
  mustEmbedUnimplementedGetSpectatorGamesServer()
}

func RegisterGetSpectatorGamesServer(s grpc.ServiceRegistrar, srv GetSpectatorGamesServer) {
  s.RegisterService(&GetSpectatorGames_ServiceDesc, srv)
}

func _GetSpectatorGames_GetSpectatorGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(GetSpectatorGamesRequest)
  if err := dec(in); err != nil {
    return nil, err
  }
  if interceptor == nil {
    return srv.(GetSpectatorGamesServer).GetSpectatorGames(ctx, in)
  }
  info := &grpc.UnaryServerInfo{
    Server:     srv,
    FullMethod: GetSpectatorGames_GetSpectatorGames_FullMethodName,
  }
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GetSpectatorGamesServer).GetSpectatorGames(ctx, req.(*GetSpectatorGamesRequest))
  }
  return interceptor(ctx, in, info, handler)
}

// GetSpectatorGames_ServiceDesc is the grpc.ServiceDesc for GetSpectatorGames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSpectatorGames_ServiceDesc = grpc.ServiceDesc{
  ServiceName: "GetSpectatorGames",
  HandlerType: (*GetSpectatorGamesServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "GetSpectatorGames",
      Handler:    _GetSpectatorGames_GetSpectatorGames_Handler,
    },
  },
  Streams:  []grpc.StreamDesc{},
  Metadata: "game.proto",
}

const (
  Go_PlayGo_FullMethodName     = "/Go/PlayGo"
  Go_SpectateGo_FullMethodName = "/Go/SpectateGo"
)

// GoClient is the client API for Go service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoClient interface {
  PlayGo(ctx context.Context, opts ...grpc.CallOption) (Go_PlayGoClient, error)
  SpectateGo(ctx context.Context, in *SpectateGoRequest, opts ...grpc.CallOption) (Go_SpectateGoClient, error)
}

type goClient struct {
  cc grpc.ClientConnInterface
}

func NewGoClient(cc grpc.ClientConnInterface) GoClient {
  return &goClient{cc}
}

func (c *goClient) PlayGo(ctx context.Context, opts ...grpc.CallOption) (Go_PlayGoClient, error) {
  stream, err := c.cc.NewStream(ctx, &Go_ServiceDesc.Streams[0], Go_PlayGo_FullMethodName, opts...)
  if err != nil {
    return nil, err
  }
  x := &goPlayGoClient{stream}
  return x, nil
}

type Go_PlayGoClient interface {
  Send(*MoveGoRequest) error
  Recv() (*StateGoResponse, error)
  grpc.ClientStream
}

type goPlayGoClient struct {
  grpc.ClientStream
}

func (x *goPlayGoClient) Send(m *MoveGoRequest) error {
  return x.ClientStream.SendMsg(m)
}

func (x *goPlayGoClient) Recv() (*StateGoResponse, error) {
  m := new(StateGoResponse)
  if err := x.ClientStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

func (c *goClient) SpectateGo(ctx context.Context, in *SpectateGoRequest, opts ...grpc.CallOption) (Go_SpectateGoClient, error) {
  stream, err := c.cc.NewStream(ctx, &Go_ServiceDesc.Streams[1], Go_SpectateGo_FullMethodName, opts...)
  if err != nil {
    return nil, err
  }
  x := &goSpectateGoClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil {
    return nil, err
  }
  if err := x.ClientStream.CloseSend(); err != nil {
    return nil, err
  }
  return x, nil
}

type Go_SpectateGoClient interface {
  Recv() (*StateGoResponse, error)
  grpc.ClientStream
}

type goSpectateGoClient struct {
  grpc.ClientStream
}

func (x *goSpectateGoClient) Recv() (*StateGoResponse, error) {
  m := new(StateGoResponse)
  if err := x.ClientStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

// GoServer is the server API for Go service.
// All implementations must embed UnimplementedGoServer
// for forward compatibility
type GoServer interface {
  PlayGo(Go_PlayGoServer) error
  SpectateGo(*SpectateGoRequest, Go_SpectateGoServer) error
  mustEmbedUnimplementedGoServer()
}

// UnimplementedGoServer must be embedded to have forward compatible implementations.
type UnimplementedGoServer struct {
}

func (UnimplementedGoServer) PlayGo(Go_PlayGoServer) error {
  return status.Errorf(codes.Unimplemented, "method PlayGo not implemented")
}
func (UnimplementedGoServer) SpectateGo(*SpectateGoRequest, Go_SpectateGoServer) error {
  return status.Errorf(codes.Unimplemented, "method SpectateGo not implemented")
}
func (UnimplementedGoServer) mustEmbedUnimplementedGoServer() {}

// UnsafeGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoServer will
// result in compilation errors.
type UnsafeGoServer interface {
  mustEmbedUnimplementedGoServer()
}

func RegisterGoServer(s grpc.ServiceRegistrar, srv GoServer) {
  s.RegisterService(&Go_ServiceDesc, srv)
}

func _Go_PlayGo_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(GoServer).PlayGo(&goPlayGoServer{stream})
}

type Go_PlayGoServer interface {
  Send(*StateGoResponse) error
  Recv() (*MoveGoRequest, error)
  grpc.ServerStream
}

type goPlayGoServer struct {
  grpc.ServerStream
}

func (x *goPlayGoServer) Send(m *StateGoResponse) error {
  return x.ServerStream.SendMsg(m)
}

func (x *goPlayGoServer) Recv() (*MoveGoRequest, error) {
  m := new(MoveGoRequest)
  if err := x.ServerStream.RecvMsg(m); err != nil {
    return nil, err
  }
  return m, nil
}

func _Go_SpectateGo_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(SpectateGoRequest)
  if err := stream.RecvMsg(m); err != nil {
    return err
  }
  return srv.(GoServer).SpectateGo(m, &goSpectateGoServer{stream})
}

type Go_SpectateGoServer interface {
  Send(*StateGoResponse) error
  grpc.ServerStream
}

type goSpectateGoServer struct {
  grpc.ServerStream
}

func (x *goSpectateGoServer) Send(m *StateGoResponse) error {
  return x.ServerStream.SendMsg(m)
}

// Go_ServiceDesc is the grpc.ServiceDesc for Go service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Go_ServiceDesc = grpc.ServiceDesc{
  ServiceName: "Go",
  HandlerType: (*GoServer)(nil),
  Methods:     []grpc.MethodDesc{},
  Streams: []grpc.StreamDesc{
    {
      StreamName:    "PlayGo",
      Handler:       _Go_PlayGo_Handler,
      ServerStreams: true,
      ClientStreams: true,
    },
    {
      StreamName:    "SpectateGo",
      Handler:       _Go_SpectateGo_Handler,
      ServerStreams: true,
    },
  },
  Metadata: "game.proto",
}
